'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));

var globalPrefix = "id";
var lastId = 0;
function nextId(localPrefix) {
  lastId++;
  return "".concat(localPrefix || globalPrefix).concat(lastId);
}
var resetId = function resetId() {
  lastId = 0;
};
var setPrefix = function setPrefix(newPrefix) {
  globalPrefix = newPrefix;
};

// @ts-nocheck
// copied and slightly modified from:
// https://github.com/facebook/react/blob/e02086bfcc698d02a41a7785a1027a94dbc88eea/packages/react-reconciler/src/ReactFiberHooks.js#L763-L791
function inputsAreEqual(arr1, arr2) {
  // Don't bother comparing lengths in prod because these arrays should be
  // passed inline.
  if (process.env.NODE_ENV !== "production") {
    if (arr1.length !== arr2.length) {
      // eslint-disable-next-line no-console
      console.error("react-id-generator: Detected a variable number of hook dependencies. The length of the " + "dependencies array should be constant between renders.\n\n" + "Previous: %s\n" + "Incoming: %s", arr1.join(", "), arr2.join(", "));
    }
  }

  for (var i = 0; i < arr1.length; i++) {
    // Inlined Object.is polyfill.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
    var val1 = arr1[i];
    var val2 = arr2[i];

    if (val1 === val2 && (val1 !== 0 || 1 / val1 === 1 / val2) || val1 !== val1 && val2 !== val2 // eslint-disable-line no-self-compare
    ) {
        continue;
      }

    return false;
  }

  return true;
}

var getIds = function getIds(count, prefix) {
  var ids = [];

  for (var i = 0; i < count; i++) {
    ids.push(nextId(prefix));
  }

  return ids;
};

function usePrevious(value) {
  var ref = React.useRef();
  React.useEffect(function () {
    ref.current = value;
  });
  return ref.current;
}

function useId() {
  var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  var prefix = arguments.length > 1 ? arguments[1] : undefined;
  var dependencies = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var idsListRef = React.useRef();
  var prevDependencies = usePrevious(dependencies);

  if (!idsListRef.current || !inputsAreEqual(prevDependencies, dependencies)) {
    idsListRef.current = getIds(count, prefix);
  }

  return idsListRef.current;
}

exports.default = nextId;
exports.resetId = resetId;
exports.setPrefix = setPrefix;
exports.useId = useId;
